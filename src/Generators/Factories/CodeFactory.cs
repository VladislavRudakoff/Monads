namespace Generators.Factories;

public static class CodeFactory
{
    public static string GenerateCode(PrimitiveToGenerate primitiveModel, string? typeNamespace)
    {
        bool isReferenceType =
            primitiveModel.Declaration.IsKind(SyntaxKind.ClassDeclaration)
            || primitiveModel.Declaration.IsKind(SyntaxKind.RecordDeclaration);

        string modifiers = string.Join(" ", primitiveModel.Declaration.Modifiers);

        return isReferenceType
            ? GenerateReferenceType(primitiveModel, typeNamespace, modifiers)
            : GenerateValueType(primitiveModel, typeNamespace, modifiers);
    }

    private static string GenerateValueType(PrimitiveToGenerate primitiveModel, string? typeNamespace, string modifiers) =>
        primitiveModel.Declaration.Kind() switch
        {
            SyntaxKind.StructDeclaration => GenerateStruct(typeNamespace, modifiers, null, Keywords.Struct, primitiveModel.Type.Name),
            SyntaxKind.RecordStructDeclaration => GenerateRecordStruct(typeNamespace, modifiers, null, Keywords.RecordStruct, primitiveModel.Type.Name),
            _ => throw new NotImplementedException()
        };

    private static string GenerateRecordStruct(string? typeNamespace, string modifiers, string? readonlyKeyword, string keyword, string modelName)
    {
        throw new NotImplementedException();
    }

    private static string GenerateStruct(string? typeNamespace, string modifiers, string? readonlyKeyword, string keyword, string modelName)
    {
        throw new NotImplementedException();
    }

    private static string GenerateReferenceType(
        PrimitiveToGenerate primitiveModel,
        string? typeNamespace,
        string modifiers)
    {
        string keyword = primitiveModel.Declaration.Keyword.Text;

        string name = primitiveModel.Type.Name;

        return @$"// <auto-generated />

{(typeNamespace is null ? null : $@"namespace {typeNamespace}
{{")}
   {modifiers} {keyword} {name}
   {{
      public readonly int Age;
   }}
{(typeNamespace is null ? null : @"}
")}";
    }

    private static string GenerateClass(string? typeNamespace, string modifiers, string? readonlyKeyword, string keyword, string modelName) =>
@$"// <auto-generated />

{(typeNamespace is null ? null : $@"namespace {typeNamespace}
{{
        ")}
   {modifiers} {(readonlyKeyword is null ? null : $"{readonlyKeyword} ")}{keyword} {modelName}
   {{
      public readonly int Age;
   }}
{(typeNamespace is null ? null : @"}
")}";

    private static string GenerateRecord(string? typeNamespace, string modifiers, string? readonlyKeyword, string keyword, string modelName)
    {
        throw new NotImplementedException();
    }

    private static string GenerateRawCode(
        string? typeNamespace,
        string modifiers,
        string? readonlyKeyword,
        string keyword,
        string modelName)
    {
        return @$"// <auto-generated />

{(typeNamespace is null ? null : $@"namespace {typeNamespace}
{{
        ")}
   {modifiers} {keyword} {modelName}
   {{
      public readonly int Age;
   }}
{(typeNamespace is null ? null : @"}
")}";
    }
}